// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id
  email               String        @unique
  name                String
  image               String?
  about               String?
  country             String?
  industryType        String?
  role                String?
  workspaces          Member[]
  onboardingCompleted Boolean?      @default(false)
  emailVerified       Boolean
  sessions            Session[]
  accounts            Account[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  task                Task[]
  activity            Activity[]
  subscription        Subscription?
  Comment             Comment[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Workspace {
  id          String    @id @default(uuid())
  name        String
  description String?
  inviteCode  String?
  members     Member[]
  ownerId     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project[]

  @@map("workspace")
}

enum AccessLevel {
  OWNER
  MEMBER
  VIEWER
}

model Member {
  id            String          @id @default(uuid())
  user          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
  workspace     Workspace?      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String?
  accessLevel   AccessLevel     @default(MEMBER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  projectAccess ProjectAccess[]

  @@unique([userId, workspaceId])
}

model Project {
  id            String          @id @default(uuid())
  name          String
  description   String?
  color         String
  workspaceId   String
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectAccess ProjectAccess[]
  task          Task[]
  activity      Activity[]
  Comment       Comment[]

  @@index([workspaceId])
}

model ProjectAccess {
  id        String   @id @default(uuid())
  memberId  String?
  member    Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  hasAccess Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberId, projectId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BACKLOG
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(LOW)
  startDate   DateTime?
  dueDate     DateTime?
  position    Int
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assigneeTo  User?        @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  File        File[]
}

model Activity {
  id          String   @id @default(uuid())
  type        String
  description String?
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@index([projectId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([userId])
}

enum FileType {
  IMAGE
  PDF
}

model File {
  id        String   @id @default(uuid())
  name      String
  url       String
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  type      FileType
  createdAt DateTime @default(now())
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              SubscriptionPlan   @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean            @default(false)
  frequency         String             @default("monthly")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([userId])
}
